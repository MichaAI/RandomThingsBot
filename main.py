import asyncio
import os
import time
from datetime import datetime
# -*- coding: utf-8 -*-
import discord
# from discord_components import DiscordComponents, Button
import sqlite3
from discord import Option, ButtonStyle

# from discord_components import DiscordComponents, Button, ButtonStyle

# from discord import Option
import requests

# from commands import *
import sqlite3

from discord.ui import Button
# from pyowm import OWM
# import torch
# import torchvision
# from stable_diffusion import DiffusionModel
from PIL import Image, ImageFilter, ImageDraw, ImageOps
import requests
from io import BytesIO

import dbClone
import economy
import paginator
import publicCoreData
import utilities
from coreData import *

# cogs
import game
import rp
import tests

import coreData
from publicCoreData import cursor
from publicCoreData import conn

whitelist = [609348530498437140, 617243612857761803]
token = coreData.token_ds
from discord.ext import commands
import random

startTimeCounter = time.time()
intents = discord.Intents.default()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è"
intents.message_content = True
intents.reactions = True
# –ó–∞–¥–∞—ë–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –∏–Ω—Ç–µ–Ω—Ç—ã
runtime = time.time()
loopCounter = 0
bot = commands.Bot(command_prefix=publicCoreData.preffix, intents=intents)





@bot.command()
async def ping(ctx):
    await ctx.send('pong')



@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user} –∑–∞ {time.time() - startTimeCounter} —Å–µ–∫—É–Ω–¥.")
    total_members = sum(len(guild.members) for guild in bot.guilds)
    await bot.change_presence(activity=discord.Game(f"{total_members} —Å–µ—Ä–≤–µ—Ä–æ–≤"))



async def noPermission(ctx, permissions):
    cursor.execute('SELECT permissions FROM users WHERE userid = ?', (ctx.author.id,))
    perms = cursor.fetchone()
    embed = discord.Embed(title="–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", description="–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!",
                          color=publicCoreData.embedColors["Error"])
    embed.add_field(name="–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!", value=f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ(—ã) —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ(—è): \n> {permissions}\n<@{ctx.author.id}>\n"
                                                  f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: \n"
                                                  f"> {perms}")
    await ctx.respond(embed=embed, ephemeral=False)
@bot.event
async def on_command_error(ctx, error):
    none = "None"
    # if isinstance(error, commands.CommandError):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(title="–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", description="–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!",
                              color=publicCoreData.embedColors["Error"])
        embed.add_field(name= "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!", value=f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ(—ã) —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ(—è): {none}")
        await ctx.send(embed=embed, ephemeral=False)
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ **{round(error.retry_after)}** —Å–µ–∫—É–Ω–¥!")
    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
    else:
        await ctx.send(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}')
@bot.slash_command(name="–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", description="–ó–∞–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞")
async def set_settings(ctx, field : Option(str, description="–ü–æ–ª–µ", required=True, choices=["SQL+commit", "eval", "–¢–∞–±–ª–∏—Ü—ã","–ë–∞–ª–∞–Ω—Å"])=0, value : Option(str, description="–ó–Ω–∞—á–µ–Ω–∏–µ", required=True)=0, ephemeral : Option(bool, description="–í–∏–¥–Ω–æ –ª–∏ —Ç–æ–ª—å–∫–æ –≤–∞–º?", required=False)=False):
    hasPermission=False
    hasPermission = await publicCoreData.parsePermissionFromUser(ctx.author.id, "root")
    if hasPermission==True:
        embed = discord.Embed(title="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", description="–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ root –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                              color=publicCoreData.embedColors["Warp"])
        if field == "SQL+commit":
            cursor.execute(value)
            conn.commit()
            embed = discord.Embed(title="–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!", description=f"–ó–∞–ø—Ä–æ—Å: {value}",
                                  color=publicCoreData.embedColors["Success"])
        elif field == "eval":
            eval(value)
            embed = discord.Embed(title="–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", description=f"–ö–æ–¥: {value}",
                                  color=publicCoreData.embedColors["Success"])
        elif field == "–¢–∞–±–ª–∏—Ü—ã":
            embed = discord.Embed(title="–¢–∞–±–ª–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω—ã!", description=f"–ó–∞–ø—Ä–æ—Å—ã: \n=====\n\n{dbClone.getSQLs(False)}",
                                  color=publicCoreData.embedColors["Success"])


        await ctx.respond(embed=embed, ephemeral=ephemeral)
    else:
        await noPermission(ctx, "root")


@bot.command(aliases=['rand', '—Ä–∞–Ω–¥', 'r', '—Ä', 'rnd', '—Ä–Ω–¥', 'random', '—Ä–∞–Ω–¥–æ–º'])
async def random_int(ctx, arg1: int, arg2: int):
    await ctx.send(random.randint(arg1, arg2))


@bot.command(aliases=['me', '—è', '>'])
async def sendMsg(ctx, *, args):
    if ctx.author.id in whitelist:
        if ctx.message.reference:
            await ctx.send(args, reference=ctx.message.reference)
        else:
            await ctx.send(args)
    await ctx.message.delete()


@bot.command(aliases=["hlp", "—Ö–µ–ª–ø", "–ø–æ–º–æ—â—å", "commands", "–∫–æ–º–∞–Ω–¥—ã"])
async def sendHelp(ctx):
    await ctx.send('''Preffix: .
ping - sends pong
rand, —Ä–∞–Ω–¥, r, —Ä, rnd, —Ä–Ω–¥, random, —Ä–∞–Ω–¥–æ–º - sends a random integer. Arguments: a b

<@1126887522690142359> by @minemaster_''')


@bot.slash_command(description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", name="—Ö–µ–ª–ø")  # guilds=[1076117733428711434]
async def help(ctx):
    await ctx.respond(
        f"–ß–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π /-–∫–æ–º–∞–Ω–¥—ã\n–ê –µ—Å–ª–∏ –Ω–µ–≤—Ç–µ—Ä–ø—ë–∂ —Ç–æ –≤–æ—Ç —Å–ø–∏—Å–æ–∫:\nhelp, sendHelp, hlp, —Ö–µ–ª–ø, –ø–æ–º–æ—â—å, commands, –∫–æ–º–∞–Ω–¥—ã\n"
        f"sendMsg, me, —è, >"
        f"\nrand, —Ä–∞–Ω–¥, r, —Ä, rnd, —Ä–Ω–¥, random, —Ä–∞–Ω–¥–æ–º, random_int"
        f"\nping"
        f"\n–í—Å—ë —Å –ø—Ä–µ—Ñ—Ñ–∏–∫—Å–æ–º ."
        f"\n–í –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω, –Ω–æ –≤—Å—ë –∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ /-–∫–æ–º–º–∞–Ω–¥. –ò–∑ –∏—Ö –º–∏–Ω—É—Å–æ–≤ - –∏—Ö –¥–æ–ª–≥–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ –≤–≤–æ–¥ –≤ –∑–∞–º–µ–Ω –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )


@bot.slash_command(description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.", name="–±–æ—Ç")
async def me(ctx, text):
    if ctx.author.id in whitelist:
        if ctx.message.reference:
            await ctx.send(text)


# @bot.command()
# async def send_embed(ctx):
#     embed = discord.Embed(title="–ó–∞–≥–æ–ª–æ–≤–æ–∫", description="–û–ø–∏—Å–∞–Ω–∏–µ", color=discord.Color.blue())
#     embed.add_field(name="–ü–æ–ª–µ 1", value="–ó–Ω–∞—á–µ–Ω–∏–µ 1", inline=False)
#     embed.add_field(name="–ü–æ–ª–µ 2", value="–ó–Ω–∞—á–µ–Ω–∏–µ 2", inline=True)
#     embed.set_footer(text="–§—É—Ç–µ—Ä")
#
#     await ctx.send(embed=embed)

@bot.command(aliases=[".."])
async def cmd_trigger_bruh(ctx):
    await ctx.send("bruh")


@bot.command(aliases=["–æ—Å–µ–±–µ", "–ø—Ä–æ—Ñ–∏–ª—å", "profile"])
async def about(ctx, user: discord.Member = None):
    async with ctx.typing():
        if user is None:
            user = ctx.author
        userid = user.id
        cursor.execute("SELECT * FROM users WHERE userid = ?", (userid,))
        result = cursor.fetchone()

        async def send_user_info_embed(color, about, age, timezone, karma, luck):
            def convertKarmaToEmoji(karma):
                if karma < -1:
                    return "‚¨õ"
                elif karma > 1:
                    return "‚¨ú"
                else:
                    return "üî≤"

            def convertLuckToEmoji(luck):
                if luck < -10:
                    return "‚¨õ"
                elif luck < -5:
                    return "üü´"
                elif luck < -3:
                    return "üü•"
                elif luck < -1:
                    return "üüß"

                elif luck > 1:
                    return "üü®"
                elif luck > 3:
                    return "üü©"
                elif luck > 5:
                    return "üü¶"
                elif luck > 10:
                    return "üü™"
                else:
                    return "‚¨ú"

            embed = discord.Embed(title=user.display_name, description=user.name, color=discord.Colour.blue())
            embed.add_field(name="–û —Å–µ–±–µ", value="> *" + about + "*", inline=False)
            embed.add_field(name="–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", value="- –í–æ–∑—Ä–∞—Å—Ç: " + age + "\n- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+" + timezone,
                            inline=True)

            embed.add_field(name="–ø—Ä–æ—á–µ–µ", value=f"{convertKarmaToEmoji(karma)}{convertLuckToEmoji(luck)}",
                            inline=False)
            embed.set_footer(
                text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤—Ç–∞—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - .—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å <–∏–º—è–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —ç—Ç–∏—Ö <> > \"–∑–Ω–∞—á–µ–Ω–∏–µ\"')
            await ctx.send(embed=embed)

        if result:
            await ctx.send("–ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞")




            clr = "#5865F2" if result[5] is None else result[5]
            abt = "–ó–∞–¥–∞—Ç—å –ø–æ–ª–µ '–û —Å–µ–±–µ' –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `.—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–µ–±–µ`" if result[2] is None else result[2]
            tmz = "UTC+?. –ó–∞–¥–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `.—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π–ø–æ—è—Å`. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ì—Ä–∏–Ω–≤–∏—á–∞." if \
            result[4] is None else str(result[4])
            age = "–ó–∞–¥–∞—Ç—å –ø–æ–ª–µ '–í–æ–∑—Ä–∞—Å—Ç' –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `.—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç`\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç." if \
            result[3] is None else str(result[3])
            karma = result[6]
            luck = result[7]
            await send_user_info_embed(clr, abt, age, tmz, karma, luck)
        else:
            await ctx.send("–ó–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...")
            # cursor.execute("INSERT INTO users (userid, username) VALUES (?, ?)", (userid, user.name))
            # conn.commit()
            publicCoreData.writeUserToDB(user)

            await send_user_info_embed("#5865F2", "–ó–∞–¥–∞—Ç—å –ø–æ–ª–µ '–û —Å–µ–±–µ' –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π .—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–µ–±–µ",
                                       "–ó–∞–¥–∞—Ç—å –ø–æ–ª–µ '–í–æ–∑—Ä–∞—Å—Ç' –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `.—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç`\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç.",
                                       "UTC+?. –ó–∞–¥–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `.—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π–ø–æ—è—Å`. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ì—Ä–∏–Ω–≤–∏—á–∞.")


@bot.command(aliases=["—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"])
async def edit(ctx, field, value):
    if field == "–æ—Å–µ–±–µ":
        cursor.execute("UPDATE users SET about = ? WHERE userid = ?", (value, ctx.author.id))
        conn.commit()
        await ctx.reply("**–°—Ç—Ä–æ–∫–∞** `–æ—Å–µ–±–µ` (.–æ—Å–µ–±–µ) –∏–∑–º–µ–Ω–µ–Ω–∞!")
    elif field == "–≤–æ–∑—Ä–∞—Å—Ç":
        cursor.execute("UPDATE users SET age = ? WHERE userid = ?", (int(value), ctx.author.id))
        conn.commit()
        await ctx.reply("**–ß–∏—Å–ª–æ** `–≤–æ–∑—Ä–∞—Å—Ç` (.–æ—Å–µ–±–µ) –∏–∑–º–µ–Ω–µ–Ω–æ!")
    elif field == "—á–∞—Å–æ–≤–æ–π–ø–æ—è—Å":
        cursor.execute("UPDATE users SET timezone = ? WHERE userid = ?", (int(value), ctx.author.id))
        conn.commit()
        await ctx.reply("**–ß–∏—Å–ª–æ** `—á–∞—Å–æ–≤–æ–π–ø–æ—è—Å` (.–æ—Å–µ–±–µ) –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        ctx.reply("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                  "- –æ—Å–µ–±–µ (—Å—Ç—Ä–æ–∫–∞)\n"
                  "- —á–∞—Å–æ–≤–æ–π–ø–æ—è—Å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n"
                  "- –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")


@bot.command()
async def send_message(ctx):
    message = await ctx.send("–ù–∞–∂–º–∏ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é ‚ùì, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await message.add_reaction("‚ùì")


@bot.event
async def on_reaction_add(reaction, user):
    if user == bot.user:
        return
    if reaction.message.author == bot.user:
        if str(reaction.emoji) == "‚ùì":
            # await reaction.message.remove_reaction("‚ùì", user)

            # reactors = await reaction.users().flatten()
            # authors = [str(author) for author in reactors]

            # for i in authors:
            #     if i ==
            # await reaction.message.channel.send(reaction.message.content)—ë
            reactors = await reaction.users().flatten()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–æ–≤ —Ä–µ–∞–∫—Ü–∏–∏
            if bot.user in reactors:
                await reaction.message.channel.send(reaction.message.content)


@bot.slash_command(description="–ü–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∫–∏", name="—Ä–∞—Å–∫–ª–∞–¥–∫–∞")  # guilds=[1076117733428711434]
async def keyboard_layout_switcher(ctx, text):
    ru_layout = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë'
    en_layout = 'qwertyuiop[]asdfghjkl;\'zxcvbnm,.`'
    result = ''
    for char in text:
        if char.lower() in ru_layout:
            index = ru_layout.index(char.lower())
            result += en_layout[index] if char.islower() else en_layout[index].upper()
        elif char.lower() in en_layout:
            index = en_layout.index(char.lower())
            result += ru_layout[index] if char.islower() else ru_layout[index].upper()
        else:
            result += char
    await ctx.respond(result, ephemeral=True)


@bot.slash_command(name="—Ç–µ—Å—Ç-—Ä–∞–±–æ—Ç—ã-—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", description="–æ–±–µ–º–µ")
async def send_image(ctx):
    # image = Image.open('10x10.png')

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞, –æ–±—Ä–µ–∑–∫–∞, —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç.–¥.
    # image = image.resize((256, 256), resample=Image.NEAREST)

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º 300x200 –ø–∏–∫—Å–µ–ª–µ–π
    image = Image.new('RGBA', (300, 200), (0, 0, 0, 0))

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
    square_image = Image.open('10X10.png')
    gray = Image.open("gray.png")
    gray = gray.convert("L")
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ImageDraw –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    draw = ImageDraw.Draw(image)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
    x1 = 10
    y1 = 10
    x2 = x1 + 3
    y2 = y1 + 3
    for i in range(10):

        # –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –ø–æ–≤–µ—Ä—Ö –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if i % 2 == 0:
            cim = ImageOps.colorize(gray, '#FF0000', '#000000')
            image.paste(cim, (i * 10, y1 + 10))
        image.paste(square_image, (i * 10, y1))

    # jittered_image = image.filter(ImageFilter.GaussianBlur(radius=2))
    # jittered_image = jittered_image.resize(image.size)
    # jittered_image = Image.blend(image, jittered_image, alpha=0.5)

    # image = glitch(image)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    image.save('image_buffer.png')
    # jittered_image.save('image_buffer.png')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    modified_image_path = 'image_buffer.png'
    modified_image = discord.File(modified_image_path, filename='image_buffer.png')
    await ctx.respond(file=modified_image)


# @bot.command()
# async def send_buttons(ctx):
#     await ctx.send(
#         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
#         components=[
#             Button(style=ButtonStyle.primary, label="–ö–Ω–æ–ø–∫–∞ 1"),
#             Button(style=ButtonStyle.secondary, label="–ö–Ω–æ–ø–∫–∞ 2"),
#             Button(style=ButtonStyle.success, label="–ö–Ω–æ–ø–∫–∞ 3"),
#         ],
#     )
#
#
# @bot.event
# async def on_button_click(interaction):
#     if interaction.component.label == "–ö–Ω–æ–ø–∫–∞ 1":
#         await interaction.respond(content="–í—ã –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 1")
#     elif interaction.component.label == "–ö–Ω–æ–ø–∫–∞ 2":
#         await interaction.respond(content="–í—ã –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 2")
#     elif interaction.component.label == "–ö–Ω–æ–ø–∫–∞ 3":
#         await interaction.respond(content="–í—ã –Ω–∞–∂–∞–ª–∏ –ö–Ω–æ–ø–∫—É 3")


# @commands.slash_command(name="–º—å—é—Ç",description="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞–∞—Ç–µ–ª—è (—Ä–æ–ª—å)")
# async def my_command(self, ctx, user : discord.Member):
#     role = discord.utils.get(ctx.guild.roles, id=role_id)
#     if role in user.roles:
#         await
#     else:
#         await


# @bot.slash_command(name="–º–µ—Ç–∫–∞-–≤—Ä–µ–º–µ–Ω–∏", description="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏")
# async def time(ctx, year: Option(int, description="–ì–æ–¥ –¥–ª—è –¥–∞—Ç—ã", required=False) = 1970,
#                month: Option(int, description="–ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –≥–æ–¥–∞", required=False) = 1,
#                day: Option(int, description="–ù–æ–º–µ—Ä –¥–Ω—è –º–µ—Å—è—Ü–∞", required=False) = 1,
#                hour: Option(int, description="–ß–∞—Å –¥–Ω—è", required=False) = 0,
#                minute: Option(int, description="–ú–∏–Ω—É—Ç–∞ —á–∞—Å–∞", required=False) = 0,
#                second: Option(int, description="–°–µ–∫—É–Ω–¥–∞ –º–∏–Ω—É—Ç—ã", required=False) = 0,
#                timezone: Option(int, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ GMT+n", required=False) = 0,
#                mode: Option(str, description="–¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", choices=("R ‚Äî –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è",
#                                                                          "d ‚Äî –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏",
#                                                                          "D ‚Äî –î–∞—Ç–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –º–µ—Å—è—Ü–∞ —Å–ª–æ–≤–æ–º",
#                                                                          "f ‚Äî –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
#                                                                          "F ‚Äî –ü–æ–ª–Ω—ã–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
#                                                                          "t ‚Äî –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã",
#                                                                          "T ‚Äî –ß–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã"),
#                             required=False) = "R"):
#     await ctx.respond(makeDSTimestamp(year, month, day, hour, minute, second, timezone, mode))


# @help.slash_option(name="name", description="Enter your name.", required=True)
# async def hello_name(ctx, name: str):
#     await ctx.send(f"Hello, {name}!")


# commands = {
#    '!rand': rand,
#    '!—Ä–∞–Ω–¥': rand,
#    '!—Ä': rand,
#    '!r': rand
# }


@bot.event
async def on_message(message):
    # if message.mention_roles:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã —Ä–æ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    #         mentioned_roles = message.role_mentions  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Ä–æ–ª–µ–π
    #         for role in mentioned_roles:
    #             if role.id in publicCoreData.infectionRolesID:  # –ó–∞–º–µ–Ω–∏ 'YOUR_ROLE_ID' –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID —Ä–æ–ª–∏
    #                 await message.author.add_roles(role)  # –î–∞–µ–º –∞–≤—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç—É —Ä–æ–ª—å
    for i in publicCoreData.infectionRolesID:
        # if str(i) in message.content:
        role = message.guild.get_role(i)
        for j in message.role_mentions:
            # print(str(j.id) + "   " + str(i))
            if j.id == i:

                await message.author.add_roles(role)
    # if message.mentions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    #     mentioned_users = message.mentions  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    #     for role_id in publicCoreData.infectionRolesID:
    #     # role_id = 1234567890  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID —Ä–æ–ª–∏
    #         role = message.guild.get_role(role_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏ –ø–æ ID
    #
    #         for user in mentioned_users:
    #             if role in user.roles and not message.reference:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #                 # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    #                 # await message.channel.send(f"{user.mention}, —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–æ–ª—å —Å –Ω—É–∂–Ω—ã–º ID!")
    #                 role = message.guild.get_role(role_id)
    # await message.add_reaction("‚ù§")

    # await bot.process_commands(message)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–±—ã—Ç–∏—è


# if message.content.lower() in commands:
#        await commands[message.content.lower()](message)

async def loop():

    ...
async def statusLoop():
    global loopCounter
    await asyncio.sleep(120)
    if loopCounter == 0:
        total_members = sum(len(guild.members) for guild in bot.guilds)
        await bot.change_presence(activity=discord.Game(name=f"{total_members} —Å–µ—Ä–≤–µ—Ä–æ–≤"))
        loopCounter+=1
    elif loopCounter == 1:

        await bot.change_presence(activity=discord.Game(f"Discord-–∏–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞"))
        loopCounter += 1
    elif loopCounter == 2:

        await bot.change_presence(activity=discord.Game(name=f"PyCharm —É–∂–µ {int(time.time()-runtime)} —Å–µ–∫—É–Ω–¥"))
        loopCounter += 1
    elif loopCounter == 3:

        await bot.change_presence(activity=discord.Game(f"DoorkaEternal"))
        loopCounter =0

# bot.add_cog(Weather(bot))
bot.add_cog(game.Game(bot))
# for f in os.listdir("./cogs"):
#     if f.endswith(".py"):
#         bot.load_extension("cogs." + f[:-3])
bot.add_cog(tests.Tests(bot))
bot.add_cog(rp.RP(bot))
bot.add_cog(economy.Economy(bot))
bot.add_cog(utilities.BotCog(bot))
# bot.add_cog(paginator.PageTest(bot))
asyncio.run(loop())
# asyncio.run(statusLoop())


bot.run(token)
