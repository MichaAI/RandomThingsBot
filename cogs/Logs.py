import discord
from discord.ext import commands
from discord import Option

import Data
from Data import db


class Logs(commands.Cog):
    ''' Logs | BOT COG'''
    name = "Logs"
    author = "Minemaster"

    def __init__(self, bot):
        self.bot = bot

    events = ["–í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ë–∞–Ω—ã",
              "–ö–∞–Ω–∞–ª—ã",
              "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤",
              "–ë–æ—Ç—ã", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"]

    @commands.has_permissions(administrator=True)
    @commands.slash_command(name="–ª–æ–≥–∏-–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", description="description")
    async def configlogs(self, ctx, category: Option(str, description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π", required=True,
                                                     choices=events) = " ",
                         channel: Option(discord.TextChannel, description="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∞", required=True) = 0,
                         mode: Option(str, description="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å", required=True,
                                      choices=["–ü–æ–¥—Ä–æ–±–Ω–æ", "–û—Å–Ω–æ–≤–Ω–æ–µ", "–û—Ç–∫–ª—é—á–∏—Ç—å"]) = " "
                         ):
        doc = db.logscfg.find_one({"id": ctx.guild.id})
        parsedmodes = {"–ü–æ–¥—Ä–æ–±–Ω–æ": 2, "–û—Å–Ω–æ–≤–Ω–æ–µ": 1, "–û—Ç–∫–ª—é—á–∏—Ç—å": 0}
        parsedmode = parsedmodes[mode]
        if doc:
            doc["states"][category] = parsedmode
            doc["channels"][category] = channel.id
            db.logscfg.update_one({"id": ctx.guild.id}, {"$set": doc})
        else:
            default_channels={}
            default_states = {}
            for k in self.events:
                default_states[k]=0
                default_channels[k]=0
            doc = {"id": ctx.guild.id, "states": default_states, "channels": default_channels}
            doc["states"][category]=parsedmode
            doc["channels"][category]=channel.id

            db.logscfg.insert_one(doc)
        embed = discord.Embed(title="–õ–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
                              description=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`\n–ö–∞–Ω–∞–ª: <#{channel.id}>\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å: **{mode}**",
                              colour=Data.embedColors["Success"])
        await ctx.respond(embed=embed)


    @commands.Cog.listener("on_member_ban")
    async def on_membar_ban(self, guild, user):
        doc = db.logscfg.find_one({"id":guild.id})
        if doc:
            channel = guild.get_channel(doc["channels"]["–ë–∞–Ω—ã"])
            state = doc["states"]["–ë–∞–Ω—ã"]
            if channel and state>0:
                try:
                    hooks = await channel.webhooks()
                    hook = None
                    for h in hooks:
                        if h.user.id == self.bot.user.id:
                            hook = h
                            break
                    if not hook:
                        hook = await channel.create_webhook(name="RTB hook")
                    embed = discord.Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user.name}` –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!",colour=discord.Colour.blue())
                    embed.set_footer(text=f"ID: {user.id}") #TODO: —Ä–æ–ª–∏, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è
                    if state>1:
                        embed.add_field(name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",value=f"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω <t:{user.created_at}:R>"
                                                                               f"",inline=False)

                    await hook.send(avatar_url=Data.webhook_avatar_url, username=f"{self.bot.user.name} | üìö–õ–æ–≥–∏", embed=embed)

                except:
                    ...



def setup(bot):
    bot.add_cog(Logs(bot))
